# -*- coding: utf-8 -*-
"""visualization.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hVzRNd49wGMj9L26rdpsTZfsoxxg1YP0
"""

from google.colab import files

# Upload file
uploaded = files.upload()

"""
CIT5900-002 Project 2
Step 5: Data Analysis & Visualization (Revised for columns present)

Module: visualization.py

Contains a single function, run_step5_analysis, which:
1. Loads a final CSV (default: "ProcessedData.csv")
2. Prints summary info and missing values
3. Creates histograms, box plots, line charts, and bar charts only for columns that exist
4. Does minimal data type conversions
5. Displays or skips each plot gracefully based on data availability
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
# from scipy import stats  # If you decide to use correlation or t-tests

def run_step5_analysis(csv_file="ProcessedData.csv"):
    """
    Loads the final curated CSV and performs Step 5: Data Analysis & Visualization.

    Parameters:
      csv_file (str): The file path to ProcessedData.csv

    Returns:
      None (displays plots and prints numeric summaries in console)
    """
    try:
        df = pd.read_csv(csv_file)
        print(f"Successfully loaded {csv_file}.")
    except FileNotFoundError:
        print(f"ERROR: {csv_file} not found. Please upload or correct the path.")
        return

    print("\n=== DATAFRAME HEAD ===")
    print(df.head())

    print("\n=== DATAFRAME INFO ===")
    df.info()

    print("\n=== DESCRIPTIVE STATISTICS (NUMERIC COLUMNS) ===")
    print(df.describe(include=[np.number]))

    print("\n=== MISSING VALUES PER COLUMN ===")
    missing_vals = df.isnull().sum()
    print(missing_vals)

    # Example: Plot FuzzScores if available
    if 'FuzzScores' in df.columns and df['FuzzScores'].dropna().shape[0] > 0:
        df['FuzzScores'] = pd.to_numeric(df['FuzzScores'], errors='coerce')
        plt.figure(figsize=(8,5))
        df['FuzzScores'].dropna().hist(bins=20)
        plt.title("FuzzScores Distribution")
        plt.xlabel("FuzzScores")
        plt.ylabel("Frequency")
        plt.show()

        plt.figure(figsize=(5,4))
        df['FuzzScores'].dropna().plot(kind='box')
        plt.title("FuzzScores Box Plot")
        plt.ylabel("FuzzScores")
        plt.show()
    else:
        print("\nNo valid 'FuzzScores' data found. Skipping those plots.")

    # Example: Plot OutputYear if available
    if 'OutputYear' in df.columns and df['OutputYear'].dropna().shape[0] > 0:
        df['OutputYear'] = pd.to_numeric(df['OutputYear'], errors='coerce')
        valid_years = df['OutputYear'].dropna()

        plt.figure(figsize=(8,5))
        valid_years.hist(bins=20)
        plt.title("OutputYear Distribution")
        plt.xlabel("Year")
        plt.ylabel("Count of Papers")
        plt.show()

        # LINE CHART
        year_counts = valid_years.value_counts().sort_index()
        plt.figure(figsize=(8,5))
        year_counts.plot(marker='o')
        plt.title("Number of Papers Published per OutputYear")
        plt.xlabel("Year")
        plt.ylabel("Number of Papers")
        plt.show()
    else:
        print("\nNo valid 'OutputYear' data found. Skipping year-based plots.")

    # Example: Bar chart for FSRDC_related
    if 'FSRDC_related' in df.columns and df['FSRDC_related'].dropna().shape[0] > 0:
        # Convert to bool if not already
        if df['FSRDC_related'].dtype != bool:
            try:
                df['FSRDC_related'] = df['FSRDC_related'].astype(bool)
            except:
                print("FSRDC_related could not be converted to boolean. Skipping bar chart.")
                return

        fsrdc_counts = df['FSRDC_related'].value_counts()
        plt.figure(figsize=(5,4))
        fsrdc_counts.plot(kind='bar')
        plt.title("FSRDC_related (True vs False)")
        plt.xlabel("Value")
        plt.ylabel("Count")
        plt.xticks(rotation=0)
        plt.show()
    else:
        print("\nNo 'FSRDC_related' data found or column missing. Skipping bar chart.")

    # WRAP UP
    print("\n=== STEP 5 ANALYSIS COMPLETE (Custom Columns) ===")
    print("All relevant plots have been displayed above (if data was present).")
    print("Check console outputs for numeric summaries.")

